#!/usr/bin/env python3
"""
Servidor de Produ√ß√£o para Portal de Horas
Configurado para uso dom√©stico em rede local
"""

import os
import subprocess
import sys
from datetime import datetime
import socket

def obter_ip_local():
    """Obt√©m o IP local da m√°quina"""
    try:
        # Conecta a um endere√ßo externo para descobrir o IP local
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            ip_local = s.getsockname()[0]
        return ip_local
    except Exception:
        return "127.0.0.1"

def verificar_dependencias():
    """Verifica se Flask est√° instalado"""
    try:
        import flask
        print("‚úÖ Flask encontrado")
        return True
    except ImportError:
        print("‚ùå Flask n√£o encontrado!")
        print("   Execute: pip install flask")
        return False

def iniciar_servidor_producao():
    """Inicia o servidor usando Waitress (WSGI server para produ√ß√£o)"""
    print("üöÄ Iniciando Portal de Horas - Servidor de Produ√ß√£o")
    print("=" * 60)
    
    # Verificar depend√™ncias
    if not verificar_dependencias():
        print("‚ùå Falha na verifica√ß√£o de depend√™ncias")
        return False
    
    # Verificar se o banco existe
    if not os.path.exists('horas_trabalho.db'):
        print("‚ùå Banco de dados n√£o encontrado!")
        print("   Execute: python migrar_para_sqlite.py")
        return False
    
    # Obter IP local
    ip_local = obter_ip_local()
    porta = 5001
    
    print(f"üåê Servidor iniciado em:")
    print(f"   Local:      http://127.0.0.1:{porta}")
    print(f"   Rede:       http://{ip_local}:{porta}")
    print(f"   Data/Hora:  {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    print("üí° Compartilhe o endere√ßo da rede com outros dispositivos:")
    print(f"   http://{ip_local}:{porta}")
    print()
    print("üîß Configura√ß√µes:")
    print("   - Servidor: Flask (Otimizado para uso dom√©stico)")
    print("   - Banco: SQLite (horas_trabalho.db)")
    print("   - Fechamento: 26-25 (customizado)")
    print("   - Base mensal: 200 horas")
    print()
    print("‚èπÔ∏è  Para parar o servidor: Ctrl+C")
    print("=" * 60)
    
    try:
        # Usar Flask nativo (adequado para uso dom√©stico)
        from index import app
        
        # Configurar aplica√ß√£o para produ√ß√£o
        app.config['ENV'] = 'production'
        app.config['DEBUG'] = False
        
        # Iniciar servidor Flask
        app.run(host='0.0.0.0', port=porta, threaded=True, debug=False)
        
    except KeyboardInterrupt:
        print("\n\nüõë Servidor interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar servidor: {e}")
        return False
    
    return True

def mostrar_informacoes_rede():
    """Mostra informa√ß√µes sobre como acessar na rede"""
    ip_local = obter_ip_local()
    print("\nüì± ACESSO VIA REDE LOCAL")
    print("=" * 40)
    print("Para acessar de outros dispositivos na sua rede:")
    print()
    print("üñ•Ô∏è  Computadores:")
    print(f"   http://{ip_local}:5000")
    print()
    print("üì± Smartphones/Tablets:")
    print("   1. Conecte na mesma rede WiFi")
    print(f"   2. Abra o navegador e digite: {ip_local}:5000")
    print()
    print("üîí FIREWALL DO WINDOWS:")
    print("   Se n√£o conseguir acessar, libere a porta 5000:")
    print("   1. Painel de Controle > Sistema e Seguran√ßa > Firewall do Windows")
    print("   2. Configura√ß√µes Avan√ßadas > Regras de Entrada")
    print("   3. Nova Regra > Porta > TCP > 5000")
    print()

if __name__ == '__main__':
    print("üè† PORTAL DE HORAS - CONFIGURA√á√ÉO RESIDENCIAL")
    print("=" * 50)
    
    if len(sys.argv) > 1 and sys.argv[1] == '--info':
        mostrar_informacoes_rede()
    else:
        if iniciar_servidor_producao():
            print("‚úÖ Servidor finalizado com sucesso")
        else:
            print("‚ùå Erro na execu√ß√£o do servidor")
            sys.exit(1)
